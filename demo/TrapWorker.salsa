module demo;
import java.io.*;

/* TrapWorker.salsa -- 
 *   Worker for Parallel Trapezoidal Rule
 */

behavior TrapWorker{
  Double trap(double local_a, double local_b, int local_n, double h) {
    //integral = (f(local_a) + f(local_b))/2.0;
    token f_local_a = f(local_a);
    token f_local_b = f(local_b);
    token integral = startIntegral(f_local_a, f_local_b);
    double x = local_a;

    for (int i = 1; i <= local_n-1; i++, x+=h) {
      //x = add(x,h);
      token f_x = f(x);
      integral = add(integral, f_x);     //x = x + h; integral = integral + f(x);
    }

    multiply(integral, h)@convertToDouble(token)@currentContinuation;
}


double f(double d) {           
    return (5*d*d*d*d);
}


double add(double d, double f){           
    return (d + f);
} 
 

double multiply(double d, double f){
    return (d * f);
}
 

double startIntegral(double d, double f){
    return ((d + f) /2.0);
}

Double convertToDouble(double d) {
    return (new Double(d));
}

}
